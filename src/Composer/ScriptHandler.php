<?php

namespace Gdbots\Bundle\AppBundle\Composer;

use Composer\Script\Event;
use Symfony\Component\Filesystem\Filesystem;

class ScriptHandler
{
    /**
     * @var array
     */
    protected static $options = [
        'gdbots-symfony' => [
            'system-file' => 'system.php'
        ]
    ];

    /**
     * Creates a system file which defines constants for use in the app kernel.
     *
     * @param Event $event
     */
    public static function installSystemFile(Event $event)
    {
        $options = array_merge(static::$options, $event->getComposer()->getPackage()->getExtra());
        if (!isset($options['gdbots-symfony']['system-file'])) {
            $options['gdbots-symfony']['system-file'] = static::$options['gdbots-symfony']['system-file'];
        }
        static::$options['gdbots-symfony']['system-file'] = $systemFile = $options['gdbots-symfony']['system-file'];

        $fs = new Filesystem();
        if ($fs->exists($systemFile)) {
            //return;
        }

        $now = new \DateTime();
        list($appVendor, $appName) = explode('/', $event->getComposer()->getPackage()->getName());
        $appRootDir = realpath(getcwd());
        $appVersion = static::getAppVersion($appRootDir, $now);
        $appDevBranch = static::getAppDevBranch($appRootDir);
        $systemMacAddress = static::getSystemMacAddress();
        $cloudProvider = self::getCloudProvider();
        $cloudRegion = self::getCloudRegion();
        $cloudZone = self::getCloudZone();
        $cloudInstanceId = self::getCloudInstanceId();
        $cloudInstanceType = self::getCloudInstanceType();

        $event->getIO()->write(sprintf('<info>Writing system file with constants to "%s"</info>', $appRootDir . '/' . $systemFile));
        $system = <<<TEXT
<?php
/**
 * ########## CAUTION ##########
 *
 * DO NOT EDIT THIS FILE as it will be overridden by Composer as part of
 * the installation/update process or by Chef/Rightscale/CodeDeploy/etc.
 *
 * Generated at {$now->format('c')} by composer
 *
 * ########## CAUTION ##########
 *
 * @see \Gdbots\Symfony\Kernel\AppKernel
 *
 */
define('APP_VENDOR', '$appVendor');
define('APP_NAME', '$appName');
define('APP_VERSION', '$appVersion');
define('APP_DEPLOYMENT_ID', '{$now->format('YmdHis')}');
define('APP_DEV_BRANCH', '$appDevBranch');
define('APP_ROOT_DIR', '$appRootDir');
define('SYSTEM_MAC_ADDRESS', '$systemMacAddress');
define('CLOUD_PROVIDER', '$cloudProvider');
define('CLOUD_REGION', '$cloudRegion');
define('CLOUD_ZONE', '$cloudZone');
define('CLOUD_INSTANCE_ID', '$cloudInstanceId');
define('CLOUD_INSTANCE_TYPE', '$cloudInstanceType');

TEXT;

        $fs->dumpFile($systemFile, $system);
    }

    /**
     * Attempts to find the version of the app using git rev-parse, svnversion and
     * finally just using the timestamp as a last resort.
     *
     * @param string $appRootDir
     * @param \DateTime $date
     * @return string
     */
    protected static function getAppVersion($appRootDir, \DateTime $date)
    {
        $fs = new Filesystem();

        if ($fs->exists('.git/refs/heads/master')) {
            ob_start();
            passthru('git rev-parse --short HEAD 2>&1');
            $version = trim(ob_get_clean());

            if (!empty($version) && false === strpos($version, 'fatal')) {
                return 'v' . $version;
            }
        }

        if ($fs->exists('.svn/entries')) {
            ob_start();
            passthru("svnversion $appRootDir 2>&1");
            $version = (int) trim(ob_get_clean());
            if (!empty($version)) {
                return 'v' . $version;
            }
        }

        return 'v' . $date->format('YmdHis');
    }

    /**
     * Attempts to get the currently active dev branch from git
     * and then from svn.  if those fail, just return 'master'.
     *
     * @param string $appRootDir
     * @return string
     */
    protected static function getAppDevBranch($appRootDir)
    {
        $fs = new Filesystem();

        if ($fs->exists('.git/refs/heads/master')) {
            return static::getCurrentGitBranch($fs);
        }

        if ($fs->exists('.svn/entries')) {
            return static::getCurrentSvnBranch($appRootDir);
        }

        return 'master';
    }

    /**
     * @param Filesystem $fs
     * @return string
     */
    protected static function getCurrentGitBranch(Filesystem $fs)
    {
        ob_start();
        passthru('git symbolic-ref --short HEAD 2>&1');
        $branch = trim(ob_get_clean());

        if (false !== strpos($branch, 'fatal')) {
            return 'master';
        }

        return $fs->exists('.git/refs/heads/' . $branch) ? $branch : 'master';
    }

    /**
     * @param string $appRootDir
     * @return string
     */
    protected static function getCurrentSvnBranch($appRootDir)
    {
        ob_start();
        passthru("svn info $appRootDir 2>&1");
        $lines = explode(PHP_EOL, ob_get_clean());
        foreach ($lines as $line) {
            if (empty($line) || false === strpos($line, 'URL:')) {
                continue;
            }

            return trim(strrev(explode('/', strrev($line))[0]));
        }

        return 'trunk';
    }

    /**
     * Returns the system node ID
     *
     * @return string
     */
    protected static function getSystemMacAddress()
    {
        static $node = null;
        if (null !== $node) {
            return $node;
        }

        $pattern = '/[^:]([0-9A-Fa-f]{2}([:-])[0-9A-Fa-f]{2}(\2[0-9A-Fa-f]{2}){4})[^:]/';
        $matches = [];

        // search the ifconfig output for all MAC addresses and return the first one found
        if (preg_match_all($pattern, static::getIfconfig(), $matches, PREG_PATTERN_ORDER)) {
            $node = $matches[1][0];
            $node = str_replace(':', '', $node);
            $node = str_replace('-', '', $node);
        }

        return $node;
    }

    /**
     * Returns the network interface configuration for the system
     *
     * @codeCoverageIgnore
     * @return string
     */
    protected static function getIfconfig()
    {
        ob_start();
        switch (strtoupper(substr(php_uname('a'), 0, 3))) {
            case 'WIN':
                passthru('ipconfig /all 2>&1');
                break;
            case 'DAR':
                passthru('ifconfig 2>&1');
                break;
            case 'LIN':
            default:
                passthru('netstat -ie 2>&1');
                break;
        }

        return ob_get_clean();
    }

    /**
     * @return string
     */
    protected static function getCloudProvider()
    {
        return getenv('CLOUD_PROVIDER') ?: 'private';
    }

    /**
     * @return string
     */
    protected static function getCloudRegion()
    {
        return getenv('CLOUD_REGION') ?: '';
    }

    /**
     * @return string
     */
    protected static function getCloudZone()
    {
        return getenv('CLOUD_ZONE') ?: '';
    }

    /**
     * @return string
     */
    protected static function getCloudInstanceId()
    {
        return getenv('CLOUD_INSTANCE_ID') ?: static::getSystemMacAddress();
    }

    /**
     * @return string
     */
    protected static function getCloudInstanceType()
    {
        return getenv('CLOUD_INSTANCE_TYPE') ?: '';
    }
}
